name: Backend CI

on:
  push:
    paths:
      - "backend/**"


jobs:

  black:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Run check
        uses: plone/code-analysis-action@v1
        with:
          base_dir: 'backend'
          check: 'black'
          path: |
            src/ploneorgbr.core/src
            src/ploneorgbr.core/setup.py
            scripts

  flake8:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Run check
        uses: plone/code-analysis-action@v1
        with:
          base_dir: 'backend'
          check: 'flake8'
          path: |
            src/ploneorgbr.core/src
            src/ploneorgbr.core/setup.py
            scripts

  isort:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Run check
        uses: plone/code-analysis-action@v1
        with:
          base_dir: 'backend'
          check: 'isort'
          path: |
            src/ploneorgbr.core/src
            src/ploneorgbr.core/setup.py
            scripts

  zpretty:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Run check
        uses: plone/code-analysis-action@v1
        with:
          base_dir: 'backend'
          check: 'zpretty'
          path: src/ploneorgbr.core/src

  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python:
          - 3.9
        plone:
          - "6.0.0a4"

    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v2

      - name: Setup Plone ${{ matrix.plone }} with Python ${{ matrix.python }}
        uses: plone/setup-plone@v1.0.0
        with:
          python-version: ${{ matrix.python }}
          plone-version: ${{ matrix.plone }}

      - name: Install package
        run: |
          pip install "plone.app.testing" -c https://dist.plone.org/release/${{ matrix.plone }}/constraints.txt
          pip install -e "src/ploneorgbr.core[test]"

      - name: Run tests
        run: |
          PYTHONWARNINGS=ignore zope-testrunner --auto-color --auto-progress --test-path src/ploneorgbr.core/src/

  release:
    runs-on: ubuntu-latest
    needs: [black, flake8, isort, zpretty, tests]

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ploneorgbr/site-backend
          labels: |
            org.label-schema.docker.cmd=docker run -d -p 8080:8080 ploneorgbr/site-backend:latest
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64
          context: backend
          file: backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: plone.org.br
    needs:
      - release
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Deploy to plone.org.br
        run: |
          mkdir -p "$HOME/.ssh"
          printf '%s' "${{ secrets.DEPLOY_SSH }}" > "$HOME/.ssh/docker"
          chmod 600 "$HOME/.ssh/docker"
          eval $(ssh-agent)
          ssh-add "$HOME/.ssh/docker"
          printf '%s %s\n' "${{ secrets.DEPLOY_HOST }}" "${{ secrets.DEPLOY_HOST_KEY }}" >> "$HOME/.ssh/known_hosts"
          docker --host "ssh://${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PORT }}" stack deploy --with-registry-auth -c devops/stacks/plone.org.br.yml plone
